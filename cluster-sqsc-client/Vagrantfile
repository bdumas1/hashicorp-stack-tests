# -*- mode: ruby -*-
# vi: set ft=ruby :

# The VMs are using the Flatcar distribution provided by : https://github.com/obourdon/flatcar-packer-vbox

Vagrant.configure("2") do |config|
  servers=[
    {
      :hostname => "Node1",
      :box => "obourdon/flatcar-linux-observability",
      :box_version => "2905.2.0",
      :ip => "172.16.0.2",
      :ssh_port => '2200',
    },
    {
      :hostname => "Node2",
      :box => "obourdon/flatcar-linux-observability",
      :box_version => "2905.2.0",
      :ip => "172.16.0.3",
      :ssh_port => '2201',
    },
    {
      :hostname => "Node3",
      :box => "obourdon/flatcar-linux-observability",
      :box_version => "2905.2.0",
      :ip => "172.16.0.4",
      :ssh_port => '2202',
    },
  ]

  servers.each do |machine|
    config.vm.define machine[:hostname] do |node|
      node.vm.box = machine[:box]
      node.vm.box_version = machine[:box_version]
      node.vm.hostname = machine[:hostname]
      node.vm.network :private_network, ip: machine[:ip]
      node.vm.network "forwarded_port", guest: 22, host: machine[:ssh_port], id: "ssh"

      if machine.has_key?(:server) and machine[:server]
         # Expose the nomad api and ui to the host
         node.vm.network "forwarded_port", guest: 4646, host: 4646
         # consul
         node.vm.network "forwarded_port", guest: 8500, host: 8500
      end

      node.vm.provision "shell" do |s|
        s.path = "./execConsulClientServer.sh"
        s.args = machine[:server] ? [machine[:ip]] : [machine[:ip], "172.16.0.2"]
        s.privileged = true
      end

      node.vm.provision "shell" do |s|
        s.path = "./execNomadClientServer.sh"
        s.args = machine[:server] ? [machine[:ip]] : [machine[:ip], "172.16.0.2"]
        s.privileged = true
      end

      # Due to the fact that Flacar Linux (formerly CoreOS) does not support
      # Virtualbox Guest Additions, synced folder will not work and therefore
      # an alternative is to copy over the corresponding folder into the VM(s)
      # Please note however, that if you perform some changes within the VMs
      # these will not propagate back to the host (like it is using synced folders)
      node.vm.provision "file", source: "../jobs", destination: "/tmp/jobs"

      node.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--memory", 2048]
        vb.customize ["modifyvm", :id, "--cpus", 1]
      end
    end
  end
end
